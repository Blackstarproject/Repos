I found another project and converted it, then added both whitelist and blacklist for processes and paths, just needs to compute a hash for the whitelist

 

Imports System.Management
'This also implements a notifier for Process Closings, it has been commented out
Public Class Form1
    Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
        openWorker.RunWorkerAsync()
        'closeWorker.RunWorkerAsync()
        Console.Read()
    End Sub

    Public Sub ProcessOpens(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles openWorker.DoWork
        Dim WhiteListedProcesses() As String = {"Excel.exe", "Winword.exe", "taskmgr.exe"}
        Dim WhiteListedPaths() As String = {"C:\Windows", "C:\Program Files\Internet Explorer"}
        Dim BlackListedProcesses() As String = {"SETUP.EXE", "INSTALL.EXE", "NOTEPAD.EXE"}
        Dim BlackListedPaths() As String = {"C:\Trojans", "C:\Viruses"}
        'Perhaps these could all be read from a text file.......
        Dim OKToRun As Boolean = False
        '
        Dim DemoQuery As New WqlEventQuery("__InstanceCreationEvent", New TimeSpan(0, 0, 1), "TargetInstance isa ""Win32_Process""")
        Dim DemoWatcher As New ManagementEventWatcher()

        DemoWatcher.Query = DemoQuery
        DemoWatcher.Options.Timeout = New TimeSpan(0, 0, 10)

        While openWorker.CancellationPending = False
            Try
                Dim bo As ManagementBaseObject = DemoWatcher.WaitForNextEvent()
                Dim EventName As String = CType(bo("TargetInstance"), ManagementBaseObject)("Name").ToString
                Dim ProcessID As Integer = CType(bo("TargetInstance"), ManagementBaseObject)("ProcessID")
                Dim NewProcess As Process = Process.GetProcessById(ProcessID)
                OKToRun = False
                '***********************************************************************
                ' These compares can and maybe SHOULD be moved around.
                ' Depends on if you want Whitelisted Apps and Paths to
                ' Overrule Blacklists
                ' Parts can be removed as well to suit your needs
                '***********************************************************************
                For Each Proc As String In WhiteListedProcesses
                    If EventName.ToUpper = Proc.ToUpper Then OKToRun = True
                Next
                '
                For Each Path As String In WhiteListedPaths
                    If NewProcess.MainModule.FileName.Contains(Path) Then
                        OKToRun = True
                    End If
                Next
                '
                For Each BListedName As String In BlackListedProcesses
                    If EventName.ToUpper = BListedName.ToUpper Then
                        OKToRun = False
                    End If
                Next
                '
                For Each BlacklistedPath As String In BlackListedPaths
                    If NewProcess.MainModule.FileName.Contains(BlacklistedPath) Then
                        OKToRun = False
                    End If
                Next
                '***********************************************************************

                openWorker.ReportProgress(0, "Open: " + EventName)
                If OKToRun = False Then
                    NewProcess.Kill()
                    openWorker.ReportProgress(0, "Kill: " + EventName)
                End If
            Catch ex As Exception
                If Not ex.Message = "Timed out " Then
                    Debug.WriteLine(ex.Message)
                End If
            End Try
        End While
        Debug.WriteLine("Open Worker Stopped")
        DemoWatcher.Stop()
    End Sub

    'Public Sub ProcessCloses(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles closeWorker.DoWork
    '    Dim DemoQuery As New WqlEventQuery("__InstanceDeletionEvent", New TimeSpan(0, 0, 1), "TargetInstance isa ""Win32_Process""")
    '    Dim DemoWatcher As New ManagementEventWatcher()

    '    DemoWatcher.Query = DemoQuery
    '    DemoWatcher.Options.Timeout = New TimeSpan(0, 0, 10)

    '    While closeWorker.CancellationPending = False
    '        Try
    '            Dim bo As ManagementBaseObject = DemoWatcher.WaitForNextEvent()
    '            Dim EventName As String = CType(bo("TargetInstance"), ManagementBaseObject)("Name").ToString
    '            closeWorker.ReportProgress(0, "Close: " + EventName)

    '        Catch ex As Exception
    '            If Not ex.Message = "Timed out " Then
    '                Debug.WriteLine(ex.Message)
    '            End If
    '        End Try
    '    End While
    '    Debug.WriteLine("Close Worker Stopped")
    '    DemoWatcher.Stop()
    'End Sub

    Public Sub WorkersReportProgres(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles openWorker.ProgressChanged, closeWorker.ProgressChanged
        Me.TextBox1.AppendText(Environment.NewLine + CType(e.UserState, String))
    End Sub

    Private Sub Form2_FormClosing(ByVal sender As System.Object, ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles MyBase.FormClosing
        Me.Cursor = Windows.Forms.Cursors.WaitCursor
        Me.TextBox1.AppendText(Environment.NewLine + Environment.NewLine + "Closing, please wait...")
        openWorker.CancelAsync()
        'closeWorker.CancelAsync()
        While openWorker.IsBusy Or closeWorker.IsBusy
            System.Windows.Forms.Application.DoEvents()
        End While
        Me.Cursor = Windows.Forms.Cursors.Default
    End Sub
End Class
 

 